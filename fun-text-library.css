/* fun-text-library.css */
/* Fun Text Library v1.3 by lufemas - Stylesheet */

/*
  User is responsible for importing their desired font (e.g., Google Fonts)
  in their main HTML or CSS. Example:
  @import url('https://fonts.googleapis.com/css2?family=Gochi+Hand&display=swap');

  The JS library can apply a font-family style directly to the base class element if configured.
*/

/* Base styling for containers - can be overridden by user's more specific CSS */
/* The JS library will apply font-family via inline style if configured. */
/* Example:
.fun-text, .custom-animated-text {
    color: white; 
    line-height: 1.6;
}
*/

/* Styling for the individual character spans generated by the JS */
/* The class name for these spans is constructed by JS as baseClassName + '-char-span' */
/* Example if baseClassName is 'fun-text': .fun-text-char-span */
/* Example if baseClassName is 'custom-animated-text': .custom-animated-text-char-span */
[class$="-char-span"] { /* General selector for all character spans from this library */
    display: inline-block;
    position: relative;
    /* opacity: 0; Set by JS or specific animation states */
}

/*
  Initial state for characters that will appear by letter.
  The class 'appear-by-letter' (or its configured alternative) should be on the PARENT container.
  The JS will handle applying the 'letterBounceIn' animation to child spans.
  The opacity is set here to ensure they are hidden before their animation starts.
*/
.appear-by-letter [class$="-char-span"],
.show-letters [class$="-char-span"] /* Example for another configured class */ {
    opacity: 0;
}


/* --- Keyframe Animations --- */

/* Wiggle Animation */
@keyframes funTextWiggle {
    0%, 100% { transform: translate(0, 0) rotate(0deg); }
    20% { transform: translate(0.8px, -0.8px) rotate(0.6deg); }
    40% { transform: translate(-0.8px, 0.8px) rotate(-0.6deg); }
    60% { transform: translate(0.5px, 0.5px) rotate(0.3deg); }
    80% { transform: translate(-0.5px, -0.5px) rotate(-0.3deg); }
}

/* Letter Bounce-In Animation */
@keyframes letterBounceIn {
    0% {
        opacity: 0;
        transform: translateY(-60px) scale(0.3) rotate(-15deg);
    }
    30% {
        opacity: 0.8;
        transform: translateY(0px) scale(1.1) rotate(5deg);
    }
    50% {
        opacity: 1;
        transform: translateY(-10px) scale(0.9) rotate(-3deg);
    }
    70% {
        transform: translateY(5px) scale(1.05) rotate(2deg);
    }
    100% {
        opacity: 1;
        transform: translateY(0) scale(1) rotate(0deg);
    }
}

/*
  Note on Smoothness/Choppiness:
  The JS library applies animation-timing-function (e.g., steps(), ease-in-out)
  directly to the character spans based on the presence of classes like
  'smoothness-0', 'smoothness-1', 'speed-0', etc., on the parent container.
  The keyframes themselves are designed for smooth transitions; the steps() function
  is what creates the choppy effect.
*/
